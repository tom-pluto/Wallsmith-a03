/*
 *  UCF COP3330 Fall 2021 Assignment 3 Solutions
 *  Copyright 2021 Thomas Wallsmith
 */

/*
 *  Exercise 25 - Password Strength Indicator
 *
 *  Create a program that determines the complexity of a given password based on these rules:
 *      - A very weak password contains only numbers and is fewer than eight characters.
 *      - A weak password contains only letters and is fewer than eight characters.
 *      - A strong password contains letters and at least one number and is at least eight characters.
 *      - A very strong password contains letters, numbers, and special characters and is at least eight characters.
 *      - If a password does not meet any of these rules, then report it as a password of unknown strength.
 *
 *  Constraints
 *      - Create a <passwordValidator> function that takes in the password as its argument and returns a numeric value
 *        you can evaluate to determine the password strength.
 *      - Use a single output statement.
 *
 *  Example Output
 *      > The password '12345' is a very weak password.
 *      > The password 'abcdef' is a weak password.
 *      > The password 'abc123xyz' is a strong password.
 *      > The password '1337h@xor!' is a very strong password.
 *
 */


package baseline;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class Solution25 {

    public static final Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {

        System.out.print("Please enter a password: ");      //Prompt the console for a string
        String string = sc.next();                          //Scan in the string

        int strength = passwordValidator(string);           //Call passwordValidator() and store resulting number

        String output = createOutput(string, strength);     //Call createOutput() to generate the output in a string
        System.out.printf("%s", output);                    //Print output statement

    }
    public static int passwordValidator(String string){

        /*
         *  FUNCTION OVERVIEW
         *  Takes a string, and determines the "strength" of the string as an integer 0-3 inclusive.
         *      0 = only numbers + fewer than 8 characters
         *      1 = only letters + fewer than 8 characters
         *      2 = contains letters and numbers + 8 or more characters
         *      3 = contains a letter, a number, and a special character + 8 or more characters
         */

        //Declare boolean variables for the different criteria of a password
        boolean hasNumber = false, hasLetter = false, hasSpecialCharacter = false, hasEightCharacters = false;
        Set<Character> set = new HashSet<Character>(Arrays.asList('!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '+'));

        //Find what which of the criteria is present in the given string

        if(string.length() >= 8){                       //determines if string is 8 characters
            hasEightCharacters = true;
        }
        for(char i : string.toCharArray()){             //starts a loop through a character array
            if(Character.isAlphabetic(i)){                  //checks to see if current element is a letter
                hasLetter = true;
            }
            else if(Character.isDigit(i)){                  //checks to see if current element is a number
                hasNumber = true;
            }
            else if(set.contains(i)){                       //checks to see if current element is a special character
                hasSpecialCharacter = true;
            }
        }

        //Determine what "strength" the string has
        int strength = getStrength(hasNumber, hasLetter, hasSpecialCharacter, hasEightCharacters);
        return strength;    //Returns the strength integer
    }

    private static int getStrength(boolean hasNumber, boolean hasLetter, boolean hasSpecialCharacter, boolean hasEightCharacters) {

        if( (hasNumber) && !(hasLetter) && !(hasEightCharacters) ){
            return 0;   //strength 0 condition
        }
        else if( !(hasNumber) && (hasLetter) && !(hasEightCharacters) ){
            return 1;   //strength 1 condition
        }
        else if( (hasNumber) && (hasLetter) && (hasEightCharacters) && !(hasSpecialCharacter)){
            return 2;   //strength 2 condition
        }
        else if( (hasNumber) && (hasLetter) && (hasSpecialCharacter) && (hasEightCharacters) ){
            return 3;   //strength 3 condition
        }

        return -1;  //this means a horrible error has occurred :)
    }

    public static String createOutput (String string, int strength){

        /*
         *  Takes in the string and the strength index generated by passwordValidator and generates the complete
         *  output string to satisfy the single output statement requirement.
         */

        //If strength == 0
            // string = "The password 'string' is a very weak password."
        //Else if strength == 1
            // string = "The password 'string' is a weak password."
        //Else if strength == 2
            // string = "The password 'string' is a strong password."
        //Else if strength == 3
            // string = "The password 'string' is a very strong password."

        String output = null;

        if(strength == 0){
            output = String.format("The password '%s' is a very weak password.%n", string);
        }
        else if(strength == 1){
            output = String.format("The password '%s' is a weak password.%n", string);
        }
        else if(strength == 2){
            output = String.format("The password '%s' is a strong password.%n", string);
        }
        else if(strength == 3){
            output = String.format("The password '%s' is a very strong password.%n", string);
        }

        return output;
    }
}
